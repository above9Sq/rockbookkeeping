---
export interface NavItem {
  text: string;
  href: string;
  target?: string;
  rel?: string;
}
interface Props {
  links?: NavItem[];
  actions?: NavItem[]; // first item rendered in the right slot + mobile footer
}

const { links = [], actions = [] } = Astro.props as Props;

// Fallback labels if nothing is passed (keeps look identical during dev)
const desktopLinks =
  links.length ? links : (
    [
      { text: 'Product', href: '#' },
      { text: 'Features', href: '#' },
      { text: 'Marketplace', href: '#' },
      { text: 'Company', href: '#' },
    ]
  );

const action = actions[0] ?? { text: 'Log in', href: '#' };
---

<header class="bg-white inset-x-0 top-0 z-50">
  <nav aria-label="Global" class="flex items-center justify-between p-6 lg:px-8">
    <div class="flex lg:flex-1">
      <a href="/" class="-m-1.5 p-1.5">
        <span class="sr-only">Your Company</span>
        <img
          src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
          alt=""
          class="h-8 w-auto"
        />
      </a>
    </div>

    <div class="flex lg:hidden">
      <button
        type="button"
        command="show-modal"
        commandfor="mobile-menu"
        class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700"
      >
        <span class="sr-only">Open main menu</span>
        <svg
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
          data-slot="icon"
          aria-hidden="true"
          class="size-6"
        >
          <path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" stroke-linecap="round" stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <!-- Desktop: data-driven links -->
    <div class="hidden lg:flex lg:gap-x-12">
      {
        desktopLinks.map((l) => (
          <a href={l.href} target={l.target} rel={l.rel} class="text-sm/6 font-semibold text-gray-900">
            {l.text}
          </a>
        ))
      }
    </div>

    <!-- Desktop: right-side action (keeps exact styling) -->
    <div class="hidden lg:flex lg:flex-1 lg:justify-end">
      <a
        href={action.href}
        target={action.target}
        rel={action.rel}
        class="rounded-md px-3.5 py-2.5 text-sm font-semibold text-indigo-600 ring-1 ring-inset ring-indigo-200 hover:bg-indigo-50 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
      >
        {action.text}
      </a>
    </div>
  </nav>

  <!-- Mobile menu -->
  <el-dialog>
    <dialog id="mobile-menu" class="backdrop:bg-transparent lg:hidden">
      <div tabindex="0" class="fixed inset-0 focus:outline-none">
        <el-dialog-panel
          class="fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-white p-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10"
        >
          <div class="flex items-center justify-between">
            <a href="/" class="-m-1.5 p-1.5">
              <span class="sr-only">Your Company</span>
              <img
                src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
                alt=""
                class="h-8 w-auto"
              />
            </a>
            <button
              type="button"
              command="close"
              commandfor="mobile-menu"
              class="-m-2.5 rounded-md p-2.5 text-gray-700"
            >
              <span class="sr-only">Close menu</span>
              <svg
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
                data-slot="icon"
                aria-hidden="true"
                class="size-6"
              >
                <path d="M6 18 18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>

          <div class="mt-6 flow-root">
            <div class="-my-6 divide-y divide-gray-500/10">
              <!-- Mobile: data-driven links -->
              <div class="space-y-2 py-6">
                {
                  (links.length ? links : desktopLinks).map((l) => (
                    <a
                      href={l.href}
                      target={l.target}
                      rel={l.rel}
                      command="close"
                      commandfor="mobile-menu"
                      class="-mx-3 block rounded-lg px-3 py-2 text-base/7 font-semibold text-gray-900 hover:bg-gray-50"
                    >
                      {l.text}
                    </a>
                  ))
                }
              </div>

              <!-- Mobile: action (keeps exact styling) -->
              <div class="py-6">
                <a
                  href={action.href}
                  target={action.target}
                  rel={action.rel}
                  command="close"
                  commandfor="mobile-menu"
                  class="-mx-3 block rounded-lg px-3 py-2.5 text-base/7 font-semibold text-white bg-indigo-600 hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 shadow-xs"
                >
                  {action.text}
                </a>
              </div>
            </div>
          </div>
        </el-dialog-panel>
      </div>
    </dialog>
  </el-dialog>
</header>

<script is:inline>
  const dlg = document.getElementById('mobile-menu');

  // Close dialog when any link inside it is clicked.
  dlg?.addEventListener('click', (e) => {
    const a = e.target.closest('a[href]');
    if (!a) return;

    const href = a.getAttribute('href');
    if (!href) return;

    // Build absolute URL to compare with current page
    const url = new URL(href, location.href);

    // Case 1: same-page hash (e.g., "#services" or "/#services")
    const isSamePageHash = url.origin === location.origin && url.pathname === location.pathname && url.hash;

    if (isSamePageHash) {
      e.preventDefault();
      const id = url.hash.slice(1);
      dlg.close();
      // Wait a frame so the dialog is fully closed, then scroll
      requestAnimationFrame(() => {
        const target = document.getElementById(id);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          // Update address bar
          history.pushState(null, '', `#${id}`);
        }
      });
      return;
    }

    // Case 2: normal navigation to another page
    dlg.close(); // let the browser follow the link
  });
</script>
