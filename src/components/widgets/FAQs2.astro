---
interface FAQ {
  question: string;
  answer: string | string[];
}

interface Props {
  items: FAQ[];
}

const { items = [] } = Astro.props;
---

<section class="bg-white">
  <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
    <h2 class="mb-6 lg:mb-8 text-3xl lg:text-4xl tracking-tight font-extrabold text-center text-gray-900">
      Frequently asked questions
    </h2>
    <div class="mx-auto max-w-screen-md">
      <div id="accordion-flush" class="accordion">
        {
          items.map((item, index) => (
            <div class="faq-item">
              <h2 id={`accordion-flush-heading-${index}`}>
                <button
                  type="button"
                  class="flex justify-between items-center py-5 w-full font-medium text-left text-gray-900 bg-white border-b border-gray-200"
                  aria-expanded="false"
                  aria-controls={`accordion-flush-body-${index}`}
                >
                  <span>{item.question}</span>
                  <svg
                    class="w-6 h-6 shrink-0 transition-transform duration-200"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
              </h2>
              <div
                id={`accordion-flush-body-${index}`}
                class="hidden"
                aria-labelledby={`accordion-flush-heading-${index}`}
              >
                <div class="py-5 border-b border-gray-200">
                  {Array.isArray(item.answer) ?
                    item.answer.map((paragraph) => <p class="mb-2 text-gray-500">{paragraph}</p>)
                  : <p class="mb-2 text-gray-500">{item.answer}</p>}
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('.faq-item');

    faqItems.forEach((item) => {
      const button = item.querySelector('button');
      const content = item.querySelector('[id^="accordion-flush-body"]');
      const icon = item.querySelector('svg');

      button?.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';

        // Close all other items
        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            const otherButton = otherItem.querySelector('button');
            const otherContent = otherItem.querySelector('[id^="accordion-flush-body"]');
            const otherIcon = otherItem.querySelector('svg');

            otherButton?.setAttribute('aria-expanded', 'false');
            otherContent?.classList.add('hidden');
            otherIcon?.classList.remove('rotate-180');
          }
        });

        // Toggle current item
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        content?.classList.toggle('hidden');

        // Animate the icon rotation
        if (isExpanded) {
          icon?.classList.remove('rotate-180');
        } else {
          icon?.classList.add('rotate-180');
        }
      });
    });
  });
</script>

<style>
  .hidden {
    display: none;
  }

  /* Add smooth transition for the content */
  [id^='accordion-flush-body'] {
    transition: height 0.3s ease-out;
  }
</style>
